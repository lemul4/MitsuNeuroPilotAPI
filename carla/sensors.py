#!/usr/bin/env python
"""
CARLA Manual Control with RGB, Semantic Segmentation Cameras and Additional Sensors

–°–∫—Ä–∏–ø—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–∏–º—É–ª—è—Ç–æ—Ä—É CARLA, —Å–ø–∞–≤–Ω–∏—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ,
–ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫ –Ω–µ–º—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–Ω—Å–æ—Ä–æ–≤:
 - —Å–µ–Ω—Å–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏,
 - RGB-–∫–∞–º–µ—Ä–∞,
 - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π LIDAR,
 - GNSS-—Å–µ–Ω—Å–æ—Ä,
 - –≥–ª—É–±–∏–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞,
 - –¥–∞—Ç—á–∏–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π,
 - –¥–∞—Ç—á–∏–∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π,
 - –¥–∞—Ç—á–∏–∫ –≤—ã–µ–∑–¥–∞ –∏–∑ –ø–æ–ª–æ—Å—ã.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º —Ä—É–ª—è.
"""

import glob
import os
import sys
import argparse
import time
import threading
from datetime import datetime
import math

import pygame
import numpy as np
import cv2
import matplotlib
import open3d as o3d

try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–¥—Ä–æ–≤ —Å–µ–Ω—Å–æ—Ä–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
latest_seg_frame = None
seg_frame_lock = threading.Lock()

latest_rgb_frame = None
rgb_frame_lock = threading.Lock()

latest_depth_frame = None
depth_frame_lock = threading.Lock()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è
latest_speed_kmh = 0.0
latest_rpm = 0.0
latest_game_time = "00:00:00"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Lidar
SEM_LIDAR_UPPER_FOV = 15.0
SEM_LIDAR_LOWER_FOV = -25.0
SEM_LIDAR_CHANNELS = 64
SEM_LIDAR_RANGE = 100.0
SEM_LIDAR_POINTS_PER_SECOND = 500000
SEM_LIDAR_ROTATION_FREQUENCY = 1.0 / 0.05

# –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏
VIRIDIS = np.array(matplotlib.colormaps['plasma'].colors)
LABEL_COLORS = np.array([
    (0, 0, 0),           # Unlabeled
    (128, 64, 128),      # Road
    (244, 35, 232),      # Sidewalk
    (70, 70, 70),        # Building
    (102, 102, 156),     # Wall
    (190, 153, 153),     # Fence
    (153, 153, 153),     # Pole
    (250, 170, 30),      # Traffic Light
    (220, 220, 0),       # Traffic Sign
    (107, 142, 35),      # Vegetation
    (152, 251, 152),     # Terrain
    (70, 130, 180),      # Sky
    (220, 20, 60),       # Pedestrian
    (255, 0, 0),         # Rider
    (0, 0, 142),         # Car
    (0, 0, 70),          # Truck
    (0, 60, 100),        # Bus
    (0, 80, 100),        # Train
    (0, 0, 230),         # Motorcycle
    (119, 11, 32),       # Bicycle
    (110, 190, 160),     # Static
    (170, 120, 50),      # Dynamic
    (55, 90, 80),        # Other
    (45, 60, 150),       # Water
    (157, 234, 50),      # Road Line
    (81, 0, 81),         # Ground
    (150, 100, 100),     # Bridge
    (230, 150, 140),     # Rail Track
    (180, 165, 180)      # Guard Rail
]) / 255.0


# ---------------- Helper Functions ----------------

def get_frame_from_image(image, color_converter=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–∞.
    –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ color_converter –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    if color_converter:
        image.convert(color_converter)
    array = np.frombuffer(image.raw_data, dtype=np.uint8)
    array = array.reshape((image.height, image.width, 4))
    return array[:, :, :3]


def semantic_lidar_callback(point_cloud, point_list):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Lidar —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π.
    –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Å—å Y –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Open3D.
    """
    data = np.frombuffer(point_cloud.raw_data, dtype=np.dtype([
        ('x', np.float32), ('y', np.float32), ('z', np.float32),
        ('CosAngle', np.float32), ('ObjIdx', np.uint32), ('ObjTag', np.uint32)]))
    points = np.array([data['x'], -data['y'], data['z']]).T
    labels = np.array(data['ObjTag'])
    colors = LABEL_COLORS[labels]
    point_list.points = o3d.utility.Vector3dVector(points)
    point_list.colors = o3d.utility.Vector3dVector(colors)


def generate_lidar_bp(world):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è blueprint –¥–ª—è Lidar —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    """
    lidar_bp = world.get_blueprint_library().find('sensor.lidar.ray_cast_semantic')
    lidar_bp.set_attribute('upper_fov', str(SEM_LIDAR_UPPER_FOV))
    lidar_bp.set_attribute('lower_fov', str(SEM_LIDAR_LOWER_FOV))
    lidar_bp.set_attribute('channels', str(SEM_LIDAR_CHANNELS))
    lidar_bp.set_attribute('range', str(SEM_LIDAR_RANGE))
    lidar_bp.set_attribute('rotation_frequency', str(SEM_LIDAR_ROTATION_FREQUENCY))
    lidar_bp.set_attribute('points_per_second', str(SEM_LIDAR_POINTS_PER_SECOND))
    return lidar_bp


def add_open3d_axis(vis):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–µ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ Open3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä.
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ç–æ—á–µ–∫, –ª–∏–Ω–∏–π –∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    axis = o3d.geometry.LineSet()
    pts = np.array([
        [0.0, 0.0, 0.0],
        [1.0, 0.0, 0.0],
        [0.0, 1.0, 0.0],
        [0.0, 0.0, 1.0]
    ])
    axis.points = o3d.utility.Vector3dVector(pts)
    axis.lines = o3d.utility.Vector2iVector(np.array([
        [0, 1],
        [0, 2],
        [0, 3]
    ]))
    axis.colors = o3d.utility.Vector3dVector(np.array([
        [1.0, 0.0, 0.0],
        [0.0, 1.0, 0.0],
        [0.0, 0.0, 1.0]
    ]))
    vis.add_geometry(axis)


# ---------------- Sensor Callback Functions ----------------

def process_segmentation_image(image):
    frame = get_frame_from_image(image, carla.ColorConverter.CityScapesPalette)
    with seg_frame_lock:
        global latest_seg_frame
        latest_seg_frame = frame


def process_rgb_image(image):
    frame = get_frame_from_image(image)
    with rgb_frame_lock:
        global latest_rgb_frame
        latest_rgb_frame = frame


def process_depth_image(image):
    frame = get_frame_from_image(image, carla.ColorConverter.Depth)
    with depth_frame_lock:
        global latest_depth_frame
        latest_depth_frame = frame


def process_gnss_data(data):
    print("GNSS: Latitude: {:.6f}, Longitude: {:.6f}, Altitude: {:.2f}".format(
        data.latitude, data.longitude, data.altitude))


def process_obstacle_data(event):
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ üöß –¥–ª—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    print("üöß Obstacle event:", event)


def process_collision_data(event):
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ üí• –¥–ª—è —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    print("üí• Collision with:", event.other_actor.type_id if event.other_actor is not None else "Unknown")


def process_lane_invasion_data(event):
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ üö¶ –¥–ª—è –≤—ã–µ–∑–¥–∞ –∏–∑ –ø–æ–ª–æ—Å—ã
    print("üö¶ Lane invasion detected:", event.crossed_lane_markings)


# ---------------- Display Loop (cv2 –æ–∫–Ω–∞) ----------------

def display_loop():
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤ —Å –∫–∞–º–µ—Ä –¥–ª—è —Å–µ–Ω—Å–æ—Ä–æ–≤, –∫—Ä–æ–º–µ RGB (–æ–Ω —Ç–µ–ø–µ—Ä—å –≤ pygame).
    –°–æ–∑–¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≥–ª—É–±–∏–Ω—ã.
    """
    cv2.startWindowThread()
    cv2.namedWindow("Semantic Segmentation", cv2.WINDOW_NORMAL)
    cv2.namedWindow("Depth Camera", cv2.WINDOW_NORMAL)

    last_seg_frame = None

    while True:
        with seg_frame_lock:
            seg_frame = latest_seg_frame.copy() if latest_seg_frame is not None else None
        with depth_frame_lock:
            depth_frame = latest_depth_frame.copy() if latest_depth_frame is not None else None

        if seg_frame is not None:
            last_seg_frame = seg_frame

        if last_seg_frame is not None:
            cv2.imshow("Semantic Segmentation", last_seg_frame)
        if depth_frame is not None:
            cv2.imshow("Depth Camera", depth_frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
        time.sleep(0.005)
    cv2.destroyAllWindows()


# ---------------- Cleanup Function ----------------

def cleanup(actors, vis):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–≤ –∏ –∞–∫—Ç–æ—Ä–æ–≤,
    –∑–∞–∫—Ä—ã—Ç–∏–µ Open3D, cv2 –∏ pygame –æ–∫–æ–Ω.
    """
    for actor in actors:
        try:
            actor.stop()
        except Exception:
            pass
        try:
            actor.destroy()
        except Exception:
            pass
    try:
        vis.destroy_window()
    except Exception:
        pass
    cv2.destroyAllWindows()
    pygame.quit()


# ---------------- Main Function ----------------

def main():
    argparser = argparse.ArgumentParser(
        description="CARLA Manual Control with RGB, Semantic Segmentation Cameras and Additional Sensors")
    argparser.add_argument('--host', default='127.0.0.1',
                           help='IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 127.0.0.1)')
    argparser.add_argument('-p', '--port', type=int, default=2000,
                           help='TCP-–ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2000)')
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
    argparser.add_argument('--disable-seg', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å —Å–µ–Ω—Å–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏')
    argparser.add_argument('--disable-rgb', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å RGB –∫–∞–º–µ—Ä—É')
    argparser.add_argument('--disable-depth', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—á–∏–∫ –≥–ª—É–±–∏–Ω—ã')
    argparser.add_argument('--disable-lidar', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å Lidar —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π')
    argparser.add_argument('--disable-gnss', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å GNSS —Å–µ–Ω—Å–æ—Ä')
    argparser.add_argument('--disable-obstacle', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—á–∏–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π')
    argparser.add_argument('--disable-collision', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—á–∏–∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π')
    argparser.add_argument('--disable-laneinvasion', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—á–∏–∫ –≤—ã–µ–∑–¥–∞ –∏–∑ –ø–æ–ª–æ—Å—ã')
    args = argparser.parse_args()

    client = carla.Client(args.host, args.port)
    client.set_timeout(2.0)
    try:
        world = client.get_world()
    except RuntimeError:
        sys.exit("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏–º—É–ª—è—Ç–æ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ CARLA –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {}:{}".format(
            args.host, args.port))

    blueprint_library = world.get_blueprint_library()

    vehicle_bp = blueprint_library.filter('vehicle.*')[0]
    spawn_points = world.get_map().get_spawn_points()
    if not spawn_points:
        sys.exit("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–ø–∞–≤–Ω–∞.")
    vehicle = world.spawn_actor(vehicle_bp, spawn_points[0])
    print("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–æ.")

    # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    actors = []

    # ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–æ–≤ ----------------

    # –°–µ–Ω—Å–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    if not args.disable_seg:
        seg_cam_bp = blueprint_library.find('sensor.camera.semantic_segmentation')
        seg_cam_bp.set_attribute('image_size_x', '800')
        seg_cam_bp.set_attribute('image_size_y', '600')
        seg_cam_bp.set_attribute('fov', '90')
        seg_cam_bp.set_attribute('sensor_tick', '0.05')
        seg_cam_transform = carla.Transform(carla.Location(x=1.5, z=2.4))
        seg_cam = world.spawn_actor(seg_cam_bp, seg_cam_transform, attach_to=vehicle)
        seg_cam.listen(process_segmentation_image)
        actors.append(seg_cam)
    else:
        print("–°–µ–Ω—Å–æ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω.")

    # –°–µ–Ω—Å–æ—Ä RGB –∫–∞–º–µ—Ä—ã (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –æ–∫–Ω–µ pygame)
    if not args.disable_rgb:
        rgb_cam_bp = blueprint_library.find('sensor.camera.rgb')
        rgb_cam_bp.set_attribute('image_size_x', '1920')
        rgb_cam_bp.set_attribute('image_size_y', '1080')
        rgb_cam_bp.set_attribute('fov', '105')
        rgb_cam_bp.set_attribute('sensor_tick', '0.05')
        rgb_cam_transform = carla.Transform(
            carla.Location(x=0.25, y=-0.31, z=1.25),
            carla.Rotation(pitch=0, yaw=0, roll=0)
        )
        rgb_cam = world.spawn_actor(rgb_cam_bp, rgb_cam_transform, attach_to=vehicle)
        rgb_cam.listen(process_rgb_image)
        actors.append(rgb_cam)
    else:
        print("RGB –∫–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

    # –°–µ–Ω—Å–æ—Ä Lidar —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π
    if not args.disable_lidar:
        lidar_bp = generate_lidar_bp(world)
        lidar_transform = carla.Transform(carla.Location(x=-0.5, z=2.4))
        lidar = world.spawn_actor(lidar_bp, lidar_transform, attach_to=vehicle)
        point_list = o3d.geometry.PointCloud()
        lidar.listen(lambda data: semantic_lidar_callback(data, point_list))
        actors.append(lidar)
    else:
        print("Lidar —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –æ—Ç–∫–ª—é—á–µ–Ω.")

    # GNSS —Å–µ–Ω—Å–æ—Ä
    if not args.disable_gnss:
        gnss_bp = blueprint_library.find('sensor.other.gnss')
        gnss_bp.set_attribute('sensor_tick', '0.05')
        gnss_transform = carla.Transform(carla.Location(x=0, y=0, z=2.8))
        gnss_sensor = world.spawn_actor(gnss_bp, gnss_transform, attach_to=vehicle)
        gnss_sensor.listen(process_gnss_data)
        actors.append(gnss_sensor)
    else:
        print("GNSS —Å–µ–Ω—Å–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω.")

    # –ì–ª—É–±–∏–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞
    if not args.disable_depth:
        depth_cam_bp = blueprint_library.find('sensor.camera.depth')
        depth_cam_bp.set_attribute('image_size_x', '800')
        depth_cam_bp.set_attribute('image_size_y', '600')
        depth_cam_bp.set_attribute('fov', '90')
        depth_cam_bp.set_attribute('sensor_tick', '0.05')
        depth_cam_transform = carla.Transform(carla.Location(x=1.5, y=0.3, z=2.4))
        depth_cam = world.spawn_actor(depth_cam_bp, depth_cam_transform, attach_to=vehicle)
        depth_cam.listen(process_depth_image)
        actors.append(depth_cam)
    else:
        print("–î–∞—Ç—á–∏–∫ –≥–ª—É–±–∏–Ω—ã –æ—Ç–∫–ª—é—á–µ–Ω.")

    # –î–∞—Ç—á–∏–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    if not args.disable_obstacle:
        obstacle_bp = blueprint_library.find('sensor.other.obstacle')
        obstacle_bp.set_attribute('sensor_tick', '0.05')
        obstacle_transform = carla.Transform(carla.Location(x=2.5, z=1.0))
        obstacle_detector = world.spawn_actor(obstacle_bp, obstacle_transform, attach_to=vehicle)
        obstacle_detector.listen(process_obstacle_data)
        actors.append(obstacle_detector)
    else:
        print("–î–∞—Ç—á–∏–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –æ—Ç–∫–ª—é—á–µ–Ω.")

    # –î–∞—Ç—á–∏–∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    if not args.disable_collision:
        collision_bp = blueprint_library.find('sensor.other.collision')
        collision_transform = carla.Transform()
        collision_sensor = world.spawn_actor(collision_bp, collision_transform, attach_to=vehicle)
        collision_sensor.listen(process_collision_data)
        actors.append(collision_sensor)
    else:
        print("–î–∞—Ç—á–∏–∫ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω.")

    # –î–∞—Ç—á–∏–∫ –≤—ã–µ–∑–¥–∞ –∏–∑ –ø–æ–ª–æ—Å—ã
    if not args.disable_laneinvasion:
        lane_invasion_bp = blueprint_library.find('sensor.other.lane_invasion')
        lane_invasion_transform = carla.Transform()
        lane_invasion_sensor = world.spawn_actor(lane_invasion_bp, lane_invasion_transform, attach_to=vehicle)
        lane_invasion_sensor.listen(process_lane_invasion_data)
        actors.append(lane_invasion_sensor)
    else:
        print("–î–∞—Ç—á–∏–∫ –≤—ã–µ–∑–¥–∞ –∏–∑ –ø–æ–ª–æ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω.")

    actors.append(vehicle)

    # –ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è cv2 –æ–∫–æ–Ω (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –≥–ª—É–±–∏–Ω–∞)
    display_thread = threading.Thread(target=display_loop)
    display_thread.daemon = True
    display_thread.start()

    # ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Open3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Lidar ----------------
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º Open3D –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Lidar –≤–∫–ª—é—á–µ–Ω
    if not args.disable_lidar:
        vis = o3d.visualization.Visualizer()
        vis.create_window(window_name='Carla Lidar', width=500, height=500)
        render_opt = vis.get_render_option()
        render_opt.background_color = [0.05, 0.05, 0.05]
        render_opt.point_size = 1
        render_opt.show_coordinate_frame = True
        add_open3d_axis(vis)
    else:
        vis = o3d.visualization.Visualizer()  # –ó–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã cleanup –Ω–µ –≤—ã–¥–∞–≤–∞–ª –æ—à–∏–±–∫—É

    # ---------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è RGB –∫–∞–º–µ—Ä—ã ----------------

    pygame.init()
    pygame.joystick.init()
    # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
    display_width, display_height = 800, 600
    screen = pygame.display.set_mode((display_width, display_height), pygame.RESIZABLE)
    pygame.display.set_caption("CARLA Manual Control & RGB Camera")
    clock = pygame.time.Clock()
    font = pygame.font.SysFont(None, 24)  # –®—Ä–∏—Ñ—Ç –¥–ª—è –æ–≤–µ—Ä–ª–µ—è

    joystick = None
    if pygame.joystick.get_count() > 0:
        joystick = pygame.joystick.Joystick(0)
        joystick.init()
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", joystick.get_name())
    else:
        print("–†—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

    control = carla.VehicleControl()
    control.throttle = 0.0
    control.steer = 0.0
    control.brake = 0.0
    control.reverse = False

    NITRO_BOOST = 3
    frame = 0
    dt0 = datetime.now()
    view_update_interval = 10  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã Open3D –Ω–µ –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ

    try:
        while True:
            if view_update_interval:
                ctr = vis.get_view_control()
                ctr.set_front([0, 0, -1])
                ctr.set_lookat([0, 0, 0])
                ctr.set_up([0, -1, 0])
                ctr.set_zoom(0.3)
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π pygame, –≤–∫–ª—é—á–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    raise KeyboardInterrupt
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        raise KeyboardInterrupt
                elif event.type == pygame.VIDEORESIZE:
                    display_width, display_height = event.size
                    screen = pygame.display.set_mode((display_width, display_height), pygame.RESIZABLE)

            keys = pygame.key.get_pressed()
            control.throttle = 0.0
            control.steer = 0.0
            control.brake = 0.0
            keyboard_used = False

            if keys[pygame.K_UP]:
                control.reverse = False
                control.throttle = 0.7
                keyboard_used = True
            elif keys[pygame.K_DOWN]:
                control.reverse = True
                control.throttle = 0.7
                keyboard_used = True

            if keys[pygame.K_LEFT]:
                control.steer = -0.3
                keyboard_used = True
            elif keys[pygame.K_RIGHT]:
                control.steer = 0.3
                keyboard_used = True

            if joystick is not None and not keyboard_used:
                steer_axis = joystick.get_axis(0)
                gas_axis = joystick.get_axis(1)
                brake_axis = joystick.get_axis(2)
                control.steer = steer_axis * 0.5
                throttle = max(0.0, min(1.0, (1 - gas_axis) / 2))
                brake = max(0.0, min(1.0, (1 - brake_axis) / 2))
                if brake < 0.0001 < throttle:
                    brake = 0.0
                if brake > 0.0001:
                    throttle = 0.0
                control.brake = brake
                if joystick.get_button(6):
                    throttle *= NITRO_BOOST
                    throttle = min(throttle, 1.0)
                control.throttle = throttle
                control.reverse = joystick.get_button(0)

            vehicle.apply_control(control)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Open3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Lidar
            if frame == 2 and not args.disable_lidar:
                vis.add_geometry(point_list)
            if not args.disable_lidar:
                vis.update_geometry(point_list)
                vis.poll_events()
                vis.update_renderer()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
            velocity = vehicle.get_velocity()
            speed = math.sqrt(velocity.x ** 2 + velocity.y ** 2 + velocity.z ** 2) * 3.6
            global latest_speed_kmh, latest_rpm, latest_game_time
            latest_speed_kmh = speed
            latest_rpm = control.throttle * 7000
            snapshot = world.get_snapshot()
            game_seconds = int(snapshot.timestamp.elapsed_seconds)
            hours = game_seconds // 3600
            minutes = (game_seconds % 3600) // 60
            seconds = game_seconds % 60
            latest_game_time = f"{hours:02d}:{minutes:02d}:{seconds:02d}"

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ RGB –∫–∞–º–µ—Ä—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è –≤ –æ–∫–Ω–µ pygame
            if not args.disable_rgb:
                with rgb_frame_lock:
                    rgb_frame = latest_rgb_frame.copy() if latest_rgb_frame is not None else None

                if rgb_frame is not None:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ BGR –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ pygame
                    rgb_frame = cv2.cvtColor(rgb_frame, cv2.COLOR_BGR2RGB)
                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
                    surface = pygame.image.frombuffer(rgb_frame.tobytes(), (rgb_frame.shape[1], rgb_frame.shape[0]), "RGB")
                    surface = pygame.transform.scale(surface, (display_width, display_height))
                    screen.blit(surface, (0, 0))
                else:
                    screen.fill((30, 30, 30))
            else:
                screen.fill((30, 30, 30))
                text_surface = font.render("RGB –∫–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞", True, (255, 255, 255))
                screen.blit(text_surface, (10, 10))

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å, RPM, –≤—Ä–µ–º—è)
            overlay_lines = [
                f"Speed: {latest_speed_kmh:.1f} km/h",
                f"RPM: {latest_rpm:.0f}",
                f"Time: {latest_game_time}"
            ]
            y = 10
            for line in overlay_lines:
                text_surface = font.render(line, True, (255, 255, 255))
                screen.blit(text_surface, (display_width - text_surface.get_width() - 10, y))
                y += text_surface.get_height() + 5

            pygame.display.flip()
            world.tick()

            process_time = datetime.now() - dt0
            fps = 1.0 / process_time.total_seconds() if process_time.total_seconds() > 0 else 0
            sys.stdout.write(f'\rFPS: {fps:.2f} ')
            sys.stdout.flush()
            dt0 = datetime.now()
            frame += 1
            clock.tick(60)
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        cleanup(actors, vis)


if __name__ == '__main__':
    main()
